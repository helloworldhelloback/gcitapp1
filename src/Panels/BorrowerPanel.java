/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import DbObjects.LibraryBranch;
import gcitapp1.DbQueries;
import gcitapp1.TablesColumns;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormatSymbols;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Ahmed
 */
public class BorrowerPanel extends javax.swing.JPanel implements ActionListener{

    private int cardNo;
    private int bookId;
    private String branchName;
    private DbQueries dbQueries;
    private TableEnum currentTable;
    /**
     * Creates new form BorrowerPanel
     */
    public BorrowerPanel(DbQueries query) {
        initComponents();
        cardNo = 0;
        bookId=1;
        currentTable =TableEnum.BOOKCHECKOUT;        
        dbQueries = query;
        run();
    }
    public void run(){       
        setBranch();
        setListeners();
        setCheckOutTable();
    }
    public void setBranch(){
        if(cb_LibraryBranches.getItemCount()>0)
            cb_LibraryBranches.removeAllItems();
        ArrayList<LibraryBranch> branches = getDbQueries().getBranches();
        for(LibraryBranch branch: branches){
            //cb_LibraryBranches.addItem(branch.getBranchName());
            cb_LibraryBranches.addItem(new LibraryBranch(branch.getId(), branch.getBranchName(),""));
        }
        cb_LibraryBranches.setSelectedIndex(0);
        
    }
    public void reset(int id){
        setCardNo(id); 
        //setBranch();        
        setCheckOutTable();
    }
    public void setCheckOutTable(){
        this.jTable1.setModel(getLibraryBranchBooksTable().getModel());        
    }
    public void setReturnTable(){
        this.jTable1.setModel(getUserCheckoutTable().getModel());    
    }
    public void setListeners(){    
        this.cb_LibraryBranches.addActionListener(this);
        this.btn_CheckoutBook.addActionListener(this);
        this.btn_ReturnBook.addActionListener(this);
        this.btn_TableCheckout.addActionListener(this);
        this.btn_TableReturn.addActionListener(this);
    }
    
    public JTable getLibraryBranchBooksTable(){        
        TablesColumns columns= new TablesColumns();
        return columns.selectBooksAvailableInBranch(getDbQueries(),cb_LibraryBranches.getSelectedItem().toString());
    }    
    public JTable getUserCheckoutTable(){        
        TablesColumns columns= new TablesColumns();        
        return columns.selectUserCheckedOutBooksInBranch(getDbQueries(),getCardNo(),cb_LibraryBranches.getSelectedItem().toString());
    }
    public void checkoutBook(){        
        LibraryBranch branch = (LibraryBranch) cb_LibraryBranches.getSelectedItem();
        int branchId = branch.getId();
        getDbQueries().insertBook_Loan(getBookId(), branchId, getCardNo());
    }
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource() == cb_LibraryBranches){  
           // System.out.println("action: "+cb_LibraryBranches.getSelectedItem());
            if(cb_LibraryBranches.getItemCount() == 0)
                setBranch();
            if(getCurrentTable().equals(TableEnum.BOOKCHECKOUT))
                setCheckOutTable();
            if(getCurrentTable().equals(TableEnum.BOOKRETURN))
                setReturnTable();
        }
        if(e.getSource() == btn_CheckoutBook){
            checkoutBook();
            setCheckOutTable();
        }  
        if(e.getSource() == btn_ReturnBook){
            getDbQueries().setUserBookReturn(getBookId(), getCardNo(),getBranchName());
            setReturnTable();
        }
        if(e.getSource() == btn_TableCheckout){   
            setCurrentTable(TableEnum.BOOKCHECKOUT);
            setCheckOutTable();
        }
        if(e.getSource() ==  btn_TableReturn){
            setCurrentTable(TableEnum.BOOKRETURN);
            setReturnTable();
        }
    }  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btn_TableCheckout = new javax.swing.JButton();
        btn_TableReturn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btn_CheckoutBook = new javax.swing.JButton();
        btn_ReturnBook = new javax.swing.JButton();
        cb_LibraryBranches = new javax.swing.JComboBox();

        jToolBar1.setRollover(true);

        btn_TableCheckout.setText("Checkout");
        btn_TableCheckout.setFocusable(false);
        btn_TableCheckout.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_TableCheckout.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btn_TableCheckout);

        btn_TableReturn.setText("Return");
        btn_TableReturn.setFocusable(false);
        btn_TableReturn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_TableReturn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btn_TableReturn);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setText("Choose Branch");

        btn_CheckoutBook.setText("Check Out Book");

        btn_ReturnBook.setText("Return Book");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_CheckoutBook)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_ReturnBook)
                    .addComponent(cb_LibraryBranches, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cb_LibraryBranches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_CheckoutBook)
                    .addComponent(btn_ReturnBook))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int index = this.jTable1.getSelectedRow();
        TableModel model = this.jTable1.getModel();
        setBookId(Integer.valueOf(model.getValueAt(index, 0).toString()));
        setBranchName(model.getValueAt(index, 3).toString());
        //System.out.println("bookID : "+getBookId());
    }//GEN-LAST:event_jTable1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_CheckoutBook;
    private javax.swing.JButton btn_ReturnBook;
    private javax.swing.JButton btn_TableCheckout;
    private javax.swing.JButton btn_TableReturn;
    private javax.swing.JComboBox cb_LibraryBranches;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the cardNo
     */
    public int getCardNo() {
        return cardNo;
    }

    /**
     * @param cardNo the cardNo to set
     */
    public void setCardNo(int cardNo) {
        this.cardNo = cardNo;
    }

    /**
     * @return the dbQueries
     */
    public DbQueries getDbQueries() {
        return dbQueries;
    }

    /**
     * @param dbQueries the dbQueries to set
     */
    public void setDbQueries(DbQueries dbQueries) {
        this.dbQueries = dbQueries;
    }

    /**
     * @return the bookId
     */
    public int getBookId() {
        return bookId;
    }

    /**
     * @param bookId the bookId to set
     */
    public void setBookId(int bookId) {
        this.bookId = bookId;
    }

    /**
     * @return the currentTable
     */
    public TableEnum getCurrentTable() {
        return currentTable;
    }

    /**
     * @param currentTable the currentTable to set
     */
    public void setCurrentTable(TableEnum currentTable) {
        this.currentTable = currentTable;
    }

    /**
     * @return the branchName
     */
    public String getBranchName() {
        return branchName;
    }

    /**
     * @param branchName the branchName to set
     */
    public void setBranchName(String branchName) {
        this.branchName = branchName;
    }

    
}
